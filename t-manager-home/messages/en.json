{
    "tManager" : "T-MANAGER",
    "home" : "> Home",
    "project" : "> Project",
    "home.terminal.welcome" : "Welcome to Txomins webpage",
    "home.terminal.aim" : "Here you will find help, whether you are a student looking for programming help or if you are a small company looking for a website or a POC",
    "home.terminal.help" : "Try typing 'help' to see the commands and tasks available",
    "home.terminal.clear" : "Type 'clear' if the console gets too bussy",
    "home.terminal.error" : "Error",
    "home.terminal.commandNotRecognized" : "That command is not recognized!",
    "home.terminal.optionRequired" : "Option is required!",
    "home.terminal.cat" : "Show details: *about *features *prices *txomin",
    "home.terminal.sectionOpened" : "Section opened",
    "home.terminal.supportedCommands" : "Here is a list of supporting command",
    "home.terminal.helpCommand" : "Enter help <command> to get help for a particular command",
    "home.terminal.links" : "Links",
    "home.terminal.done" : "Done",
    "home.projectMotivation" : "About this project",
    "home.projectMotivation.description" : "<p>After several years, I've realized that the most difficult thing for a programmer to do when starting an application is to <b>START</b>, whether because of laziness, lack of resources or time. With this web I try to help those who need that little push, either in a practical or theoretical way.</p><p>My idea is to help students or programmers with less experience to settle down the bases of the object oriented programming, with practical and theoretical exercises, since sometimes the programming can be choked if the bases are not clear</p><p>In addition, I make web pages with <b>WORDPRESS</b> for anyone who needs to get out of a jam (https://psk9.es/, https://helmuga.eu/ or https://carolinamosquera.es/).</p><p>For small businesses or entrepreneurs, I also provide proofs of concept so that they can carry out their ideas as the showed in http://investdividend.com/ and my own POC https://github.com/txomin55/t-manager-module",
    "home.projectFeatures": "Project characteristics",
    "home.projectFeatures.architecture": "Clean architecture",
    "home.projectFeatures.architecture.sub": "Hexagonal architecture, so that the application in its backend part has total flexibility for new implementations, also helping in the management of long-term errors",
    "home.projectFeatures.internationalization": "Internationalization",
    "home.projectFeatures.internationalization.sub": "Internationalization in both back and frontend",
    "home.projectFeatures.exceptionHandling": "Exception handling",
    "home.projectFeatures.exceptionHandling.sub": "Handling custom exceptions in the backend and a trigger in the front to show a message if there is one",
    "home.projectFeatures.authentication": "Authentication",
    "home.projectFeatures.authentication.sub": "Authentication based on OAUTH2, with multiple roles and endpoints limited to scopes",
    "home.projectFeatures.security": "Security",
    "home.projectFeatures.security.sub": "Spring security configured to have a secure but flexible application",
    "home.projectFeatures.documentation": "Documentation",
    "home.projectFeatures.documentation.sub": "Thanks to the hexagonal architecture, the code can be used as a document, since the use cases are classes. Also, the use of swagger for endpoint documentation and gihub project (or section <b> project </b>) for more information ",
    "home.pricingPlans": "Prices",
    "home.pricingPlans.reinforcement": "Reinforcement / Individuals",
    "home.pricingPlans.reinforcement.sub": "Learn how to program",
    "home.pricingPlans.reinforcement.item1" : "Learn the basics of object-oriented programming",
    "home.pricingPlans.reinforcement.item2" : "Advance with polymorphism and good practices",
    "home.pricingPlans.reinforcement.item3" : "Go to ninja level with synchronism, streams, lambdas ...",
    "home.pricingPlans.reinforcement.item4" : "Frontend development learning the base with JS and advancing with Nuxt and Vue",
    "home.pricingPlans.poc": "Proofs of Concept",
    "home.pricingPlans.poc.sub": "Do you need any proof of concept?",
    "home.pricingPlans.poc.item1" : "Development of proofs of concept",
    "home.pricingPlans.poc.item2" : "I provide a CRUD module creation tool for rapid development",
    "home.pricingPlans.poc.item3" : "Hexagonal architecture to minimize the cost of changes in developed applications",
    "home.pricingPlans.web": "Web pages",
    "home.pricingPlans.web.sub": "Creation of web pages",
    "home.pricingPlans.web.item1" : "Website development with WORDPRESS",
    "home.pricingPlans.web.item2" : "Position your business on both google and google maps",
    "home.pricingPlans.web.item3" : "Managed hosting",
    "home.pricingPlans.askForIt": "+ Info",
    "home.me" : "Me",
    "home.reachMe" : "Contact me",
    "home.mail" : "Mail",
    "home.firstName" : "First name",
    "home.lastName" : "Last name",
    "home.yourText" : "Text",
    "home.me.description": "<p>I have worked in both backend and frontend for over 6 years in different companies in Coru√±a, learning and applying best practices in the world of programming, both at the code and architecture level. </p> <p> <b> Computer engineer </b> </p> <p> <b> Master in Software Engineering </b> </p> <p> <b> Years of experience </b> < / p> <p> <b> Constantly expanding knowledge </b> </p> ",
    "home.pricingPlans.description": "Nothing is fixed, this is only a guideline, everything depends on everything ... :)",
    "project.motivation.title": "Motivation",
    "project.motivation.description": "The motivation of this project is purely personal, although I think it has quite a lot of uses, both educational and professional. Based on the <b> SpringBoot </b> framework for the entire backend and <b> Vue </b> for the frontend. The purpose is to have an example of a clean and ready architecture to start developing without having to deal with issues such as authentication, exception handling, internationalization etc. The project is intended to be used as microservice and microfrontend, thanks to Vue, the web application is a <b> SPA </b> that exposes all the compiled js (webpack) in a path accessible by a get request, thus being able to load the js of the project and paint it in a div in particular of a larger application (eg a dashboard). ",
    "project.structure.title" : "Structure",
    "project.structure.description" : "The Hexagonal Architecture, released by Alistair Cockburn - also known as Port and Adapter Architecture - is primarily motivated by separating our application into different layers or regions with their own responsibility. In this way it manages to decouple layers from our application allowing them to evolve in isolation. In addition, having the system separated by responsibilities will facilitate reuse. Thanks to this decoupling we also get the advantage of being able to test these layers without the intervention of other external ones, falsifying the behavior with double testing, for example. This architecture is usually represented in the form of a hexagon, but the number of sides is not what matters, but what they represent. Each side represents a port in or out of the application. For example, one port may be HTTP, and make requests to our application, another port may be SOAP, and also make requests to the application. Another one can be a database server where the data from our domain persist.</p><p>The Hexagonal Architecture proposes that our domain is the core of the layers and that it does not couple to anything external. Instead of making explicit use and through the principle of dependency inversion we couple to contracts (interfaces or ports) and not to concrete implementations.</p>Broadly speaking, and if there is a lot of detail, what it proposes is that our core be seen as an API with well specified contracts. Defining ports or entry points and interfaces (adapters) so that other modules (UI, DB, Test) can implement them and communicate with the business layer without it having to know the origin of the connection. This is called ports and adapters, which could be defined as follows: Port: definition of a public interface. Adapter: specialization of a port for a specific context.</p><p>Source: <a href='https://medium.com/@edusalguero/hexagonal-architecture-59834bb44b7f' class='uri'>https://medium.com/@edusalguero/hexagonal-architecture-59834bb44b7f</a></p><figure><img src='images/arquitectura.png' style='width:100%' title='Hexagonal architecture' alt='' /><figcaption>hexagonal-architecture</figcaption></figure><p>The project is defined by different submodules of Maven:</p><ul><li><p><b>Loader: </b> It is the one in charge of loading the application, it only contains the class that starts the SpringBoot application, the yml of environment variables per profile and the port adapters configurations. For this last one, the configuration classes FooApplicationConfiguration and FooInMemoryAdapterConfiguration or FooMongoAdapterConfiguration are used depending on the environment variable 'module.deploy.tech' defined at the time of starting the application (by default 'in-memory'), there is also another variable with the name 'module. deploy.external-communication-tech' that by default is 'rest' and is used to use the configuration beans of communication between microprojects by REST (this is thought to implement kafka, rabbit...). To manage the profiles theme (both Maven and Spring) you have to look at the pom.xml of the parent module, where the Maven profiles are defined and associated to the Spring profile by setting the parameters spring.profiles.active (used to select the right yml to the profile) and npm.build (used in the frontend project to compile). Before selecting the file according to the profile, the application.yml is loaded, that takes the value of spring.profile.active and sets it to Spring, so it can take the file corresponding to the profile (application-develop by default).</p></li><li><p><b>Web:</b> The Web submodule is in charge of copying in its resources folder the Frontend project and also of defining all the security policies, beans, translations, drivers (API) etc. We can say that it is the most complex module of all. Thanks to Springboot and its dependencies the web project is configured to take whatever you have in resources, but in this case, before showing the index.html located in the public folder (along with the compiled js and css of the Frontend) you have to log in with the OAuth server. To do this we define in the MainController.java that when we go to the classpath '/' we redirect to 'auth/authorize' instead of showing the index (implementations in AuthController.java); to perform this action we use the certificates located in the 'publicKey' folder, all the configuration related to OAuth is in the OAuth2ResourceServerConfigJwt.java. Once we log in successfully, the redirection path defined by the OAuth client will be that of '/init' which will show us the index.html and run the compiled js (module.js) when it loads. </p></li><li><p><b>Frontend (UI):</b> This is a very simple maven project with everything necessary to execute a Vue application, here are located (besides the .js and .vue file folders) the package.json (where the commands that can be executed are defined), the configuration files .env.development and env.production (from the package command. json command you define the environment to use and depending on that variable you take one file or another) where you define some parameters according to the environment, the vue.config.js (where you define the proxy for local development, avoid hashing, the path of the project and that generates a single . js with everything necessary to be used as a microfrontend) and the pom.xml (where in the build phase the frontend-maven-plugin is executed to execute node and npm commands, in case you don't have these installed, it downloads them, and finally the appropriate npm command is launched. build to the profile that is used, defined in the pom.xml of the root project).</p></li><li><p><b>Application:</b> Where all the flow logic of each use case is defined, it uses the input adapters (implemented by the web layer) to execute the proper flow of the use case independently of the port adaptations, keeping the business logic clean of unnecessary dependencies. </p></li><li><p><b>Domain:</b> The manager of storing the models that the application layer uses, regardless of the bbdd engine used, is not dependent on any technology.</p></li><li><p><b>Infrastrucure:</b> It is who implements the output ports exposed by the application layer, in this case there are the memory persistence ones and in MongoDB.</p></li></ul> The idea of the layers described above is the following. </p><p><img src='images/diagrama-logico.png' style='width:100%' title='Diagrama logico' alt='diagram-logico' /></p><p>An example of a class and flow diagram would be the following (a use case of creating Foo) You can see the different interactions of the layers with the ports and adapters and the objects that each one uses to do its job.</p><p><img src='images/diagramaClases.png' style='width:100%' style='width:100%' alt='class diagram'/></p><p><img src='images/diagramaFlujo.png' style='width:100%' alt='flow diagram' /></p>",
    "project.authentication.title" : "Authentication",
    "project.authentication.description" : "Login credentials for open-source users are as follows.</p><p><div class='sourceCode'><pre class='sourceCode javascript'><code class='sourceCode javascript'>user : user-open-source</br>password: password-open-source</code></pre></div></p><p>To execute authentication, a modification of the restTemplate is used to add the SSL certificate, since the authentication and authorization server has the same . p12 that all the modules, this is the one that is included. The configuration is done thanks to the RestTemplateConfiguration class in the module-web. From the module-frontend application a post request is sent to the LogoutController.java and it returns the logout path of the OAUTH2 server and the redirection path to the module homepath, making the effect of returning to the login screen but with the form clean, as the server takes care of removing the JSESSIONID cookie by the path.</p>",
    "project.frontend.title" : "Frontend",
    "project.frontend.description" : "<p>The visual part of the application has been developed with Vue thanks to the ease and speed of the framework at the time of development.</p><h3 id='node'>Node</h3><p>The node version that is installed for the clean install is v10.16 0, npm version does not need to be defined</p><h3 id='comandos-npm'>NPM Commands</h3><div class='sourceCode' id='cb1'><pre class='sourceCode javascript'><code class='sourceCode javascript'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a>npm install</span><span id='cb1-2'><a href='#cb1-2' aria-hidden='true'></a>npm run serve</span><span id='cb1-3'><a href='#cb1-3' aria-hidden='true'></a>npm run build</span><span id='cb1-4'><a href='#cb1-4' aria-hidden='true'></a>npm run lint</span></code></pre></div><p>The project sources are from <a href='http: //materialdesignicons. com/'>http://materialdesignicons.com/</a></p><h3 id='el-modulo'>The module</h3><p>The launcher module setea window. t_manager_access_token with its access token and window.t_manager_access_token_validity with its validity time.</p><p>If it's a new module and it's included in the launcher, we should also add that the module is assembled in the launcher with the window object. isModuleEnsambled with module:value ===; {'t-manager-MODULE': true} so the module can check if it's included or not to call the service to get the token by itself or to take it from window. t_manager_access_token.</p><p>In the index.html there should be a div with the id of store.state.module, that is the name of the module that we decide.</p><p>The main.js is the one in charge of loading and initializing the frontend, in it we use the common library t-manager-commons to install Vue components, initialize the oauth2 token refresh and the Vuetify class with the commons styles. It is necessary to define window.Vue = WindowVue and set it back to null because the common library of the t-manager-commons is a Vue library that expects window.Vue to be set, but then the components are installed in the Vue instance that is going to be used in this module; since it can be embedded in another application this has to be differentiated. The translations used by the application are added to those already existing in the library, in case the language does not exist, the components of this one will not be seen with the translated labels. </p><p>The router and store js check that if the dependency they are going to use is already in the Vue object, it is not used, this is also to prevent errors of plugins loaded more than once.</p><p>The images have to be loaded as in the example because at the moment the application is embedded, there is no other way to access them.</p>",
    "project.backend.title" : "Backend",
    "project.backend.description" : "<p>As explained before, the backend follows a hexagonal structure, the following sections explain how the 'conflicting' parts or those that must be well understood of the application have been developed. </p> <h3 id = 'logging'> Logging </h3> <p> Thanks to the @EnableWebSecurity (debug = true) annotation, the project spits all the necessary parameters of the requests received by the console. Springboot by default brings a logging configuration that can be overwritten, that is done through the logback.xml file, but in this case, to avoid more configuration files, the logback-spring.xml is used where we can also use other Spring annotations (such as that of the profile) to have different configurations depending on the chosen profile. </p> <h3 id = 'locale'> Locale </h3> <p> In the WebMvcConfigurer class, the locale resolver is defined, which in each request it receives looks for the 'Accept-language' header to define the locale in which it has to display the messages. This header is set thanks to an Axios interceptor in the frontend main.js. </p> <h3 id = 'exception-handling'> Exception handling </h3> <p> Exceptions are collected in CustomExceptionHandler , this is where they are transformed to CustomException so that the frontend always receives the same fields regardless of the type of error. </p> <h4 id = 'timeout'> Timeout </h4> <p> The timeout is managed with the filter TimeoutFilter in the web project, this cuts the thread according to the value defined of 'module.timeoutValue' in the application.yml (5000ms by default). </p> <h4 id = 'validations'> Validations </h4> <p > The routes and objects that are received in the requests are validated with the @Valid annotation and in case of not passing it, the CustomExceptionHandler detects it, for an example see the case of createFoo in the web project, where it receives a CreateFooWeb object and the name value is mandatory, in turn, it tells the label to display in the appropriate locale. It is one more layer of validation, since the frontend also validates this. </p> <h3 id = 'security'> Security </h3> <p> All security management is carried out thanks to Spring security and the t-manager-oauth2-server application located in the cloud. </p> <h4 id = 'spring'> Spring </h4> <p> Only the routes containing '/ api / *' or '/ are secured api / ** ', everything else is public, this is because the application (in the frontend) uses history mode, avoiding having to use the # in the path, so if you want to access for example the /home route, it cannot be secured; moreover, all requests that are not api, swagger, or resource requests are redirected to the index. html, so you can copy and paste routes in the browser and not have a problem.</p><h4 id='data-of-keystore'>Keystore data</h4><p>The t-manager-oauth2-server application uses a certificate so that its consumers can trust where the requests come from. </p><div class='sourceCode' id='cb1'><pre class='sourceCode javascript'><code class='sourceCode javascript'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a>keystore name<span class='op'>:</span> t<span class='op'>-</span>manager</span><span id='cb1-2'><a href='#cb1-2' aria-hidden='true'></a>keypass<span class='op'>:</span> t<span class='op'>-</span>manager<span class='op'>-</span>password</span><span id='cb1-3'><a href='#cb1-3' aria-hidden='true'></a>store pass<span class='op'>:</span> t<span class='op'>-</span>manager<span class='op'>-</span>password</span></code></pre></div><h4 id='a-having-account-with- oauth2'>To take into account with OAUTH2</h4><p>The resourceId registered in mongo users has to have the same one that the module application in OAuth2ResourceServerConfigJwt ; config. resourceId('foo');. When accessing the project path in href='http://localhost:8002/module,'>http://localhost:8002/module,</a> you are redirected to the login page of the t-manager-oauth2-server application where after entering the credentials you are redirected again to href='http://localhost:8002/module/init'>http://localhost:8002/module/init</a> which in turn does it to href='http://localhost:8002/module/home. For authentication and subsequent authorization, the code flow of oauth2 is used (<a href='https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/).'>https://www. oauth.com/oauth2-servers/access-tokens/authorization-code-request/).</a> The frontend takes care of automatically refreshing the token by making use of the utilities of the common library t-manager-commons (this happens in the main.js of the frontend layer and like the locale, it is sent in all requests to api as Authorization header). </p><h3 id='cors'>CORS</h3><p>As it is a SPA intended to be used as a microservice and a microfrontend, the CORS must allow absolutely everything, since in case an unidentified user wants to access an api resource he will not be able to because he does not have the authentication token. </p><h3 id='llamadas-a-api-rest'>CALLS TO API REST</h3><p>In order to use the api rest that the te t-manager modules generate, you have to add in them the SSL certificate to be able to make calls to routes with HTTPS, so the CustomRestTemplate utility is used that is defined in the 'rest' package of the infrastructure module, to use it later as an example in the implementation to obtain the Bar (in GetBarRestAdapter). </p><h3 id='swagger'>Swagger</h3><p>The swagger is mounted to support Oauth2, so if you want to call the API you have to log in the lock icon and then add the necessary parameters to the request, its configuration is in SwaggerConfiguration.java (in the Web project). </p><div class='sourceCode' id='cb1'><pre class='sourceCode javascript'><code class='sourceCode javascript'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a>http<span class='op'>: </en><en class='co'>//localhost:8002/module/swagger-ui. html</english></english></code></pre></div></p>",
    "project.compilation.title" : "Compilation",
    "project.compilation.description" : "<p>The profiles for compiling and executing the application are as follows: </p> <ul> <li> <b> develop </b> (local server) </li> <li><b>production</b> (IP server specified in the application-production.yml file) </li> <li> <b> kubernetes </b> (kubernetes server) </li> </ul> <p> To compile this project must be located in the root project and execute the following command, by default the profile used is' develop 'but there are 2 others (explained above): </p> <div class='sourceCode' id='cb1'><pre class='sourceCode bash'><code class='sourceCode bash'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a><span class='ex'>mvn</span> clean install -Pproduction</span></code></pre></div> <p> NOTE: As this is a multi-module Maven project, the compilation of the project's children (web, application, loader ...) depend on the version defined in the parent, this is done with the property 'revision' and so that at execution time, the module will ader have the parent version, you need to use the 'flatten-maven-plugin' plugin to pass the data from the parent to the children, this configuration is located in the pom of the parent project. </p>",
    "project.execution.title" : "Execution",
    "project.execution.description" : "<p>The application has 2 types of implementation as regards persistence, this variable is set with the name of module.build.tech: </p> <ul><li><b>in-memory</b> (implementation of in-memory bbdd) </li> <li> <b> mongo </b> (implementation of mongo bbdd) </li> </ul> <p> For communication between modules, just It has the following implementation, but here you can configure others such as Kafka, Rabbit ..., this variable is set with the name of module.build.external-communication-tech: </p> <ul> <li> <b > rest </b> (kubernetes server) </li> </ul> <p> To execute this project, you must go to the loader project and execute (this way we would use the persistence implementation in mongo instead of the default one from memory): </p> <div class='sourceCode' id='cb1'><pre class='sourceCode bash'><code class='sourceCode bash'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a><span class='ex'>mvn</span> spring-boot:run -Dspring.profiles.active=production -Dmodule.build.tech=mongo</span></code></pre></div> <h3>HTTPS</h3> <p> In case of launching the application in the 'production' environment, the application will be launched in with the HTTPS protocol. To do this, use the .p12 located in the keystore folder in the module-loader resources. In addition, the necessary settings are added in the application-production.yml so that the tomcat that is displayed has the necessary data. This certificate is self-signed and has the SAN of localhost and the ip 18.194.82.207 (that of the Amazon server). In case you want to create a new one for another server, in the JAVA_HOME folder: </p><div class='sourceCode' id='cb1'><pre class='sourceCode bash'><code class='sourceCode bash'><span id='cb1-1'><a href='#cb1-1' aria-hidden='true'></a><span class='ex'>keytool</span> -genkeypair -alias t-manager -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore t-manager.p12 -validity 9999 -ext san=dns:localhost,ip:18.194.82.207</span></code></pre></div><p> NOTE: There is a small trick in the pom of the web module where it is said that filtering is not used with the .p12 file, but Maven automatically modifies it and gives errors when launching the JAR. </p>",
    "$vuetify.badge" : "Badge",
    "$vuetify.close" : "Close",
    "$vuetify.dataIterator.noResultsText" : "No matching records found",
    "$vuetify.dataIterator.loadingText" : "Loading items...",
    "$vuetify.dataTable.itemsPerPageText" : "Rows per page:",
    "$vuetify.dataTable.ariaLabel.sortDescending" : ": Sorted descending.",
    "$vuetify.dataTable.ariaLabel.sortAscending" : ": Sorted ascending.",
    "$vuetify.dataTable.ariaLabel.sortNone" : ": Not sorted.",
    "$vuetify.dataTable.ariaLabel.activateNone" : "Activate to remove sorting.",
    "$vuetify.dataTable.ariaLabel.activateDescending" : "Activate to sort descending.",
    "$vuetify.dataTable.ariaLabel.activateAscending" : "Activate to sort ascending.",
    "$vuetify.dataTable.sortBy" : "Sort by",
    "$vuetify.dataFooter.itemsPerPageText" : "Items per page:",
    "$vuetify.dataFooter.itemsPerPageAll" : "All",
    "$vuetify.dataFooter.nextPage" : "Next page",
    "$vuetify.dataFooter.prevPage" : "Previous page",
    "$vuetify.dataFooter.firstPage" : "First page",
    "$vuetify.dataFooter.lastPage" : "Last page",
    "$vuetify.dataFooter.pageText" : "{0}-{1} of {2}",
    "$vuetify.datePicker.itemsSelected" : "{0} selected",
    "$vuetify.noDataText" : "No data available",
    "$vuetify.carousel.prev" : "Previous visual",
    "$vuetify.carousel.next" : "Next visual",
    "$vuetify.carousel.ariaLabel.delimiter": "Carousel slide {0} of {1}",
    "$vuetify.calendar.moreEvents" : "{0} more",
    "$vuetify.fileInput.counter" : "{0} files",
    "$vuetify.fileInput.counterSize" : "{0} files ({1} in total)",
    "$vuetify.timePicker.am" : "AM",
    "$vuetify.timePicker.pm" : "PM"
}
